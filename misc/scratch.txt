<form  method = "post" action = "post_info" enctype="multipart/form-data">

<input type = "file" accept = "image/*" name = "user[image]" value = "<%= avatar %>" required>

{"name"=>"Bob Wiley", "age"=>"30", "n1"=>"21", "n2"=>"22", "n3"=>"23", "quote"=>"Here it is!", 

"image"=>{:filename=>"upload_1.png",
          :type=>"image/png",
          :name=>"user[image]",
          :tempfile=>#,
          :head=>
            "Content-Disposition: form-data; name=\"user[image]\";
                                  filename=\"upload_1.png\"\r\n
             Content-Type: image/png\r\n"}
}


"image"=>{

filename: "upload_1.png",
type: "image/png",
name: "user[image]",
tempfile: #,
head:
  "Content-Disposition: form-data; name=\"user[image]\";
                        filename=\"upload_1.png\"\r\n
   Content-Type: image/png\r\n"

}


https://postgresql-jv.herokuapp.com/



Exception occurred
ERROR:  syntax error at or near "="
LINE 1: update  set n1 = $2 where id = $1

Variable	Value
user	
{"name"=>"Bob", "age"=>"2", "n1"=>"2", "n2"=>"3", "n3"=>"4", "quote"=>"09", 
"image"=>{:filename=>"upload_1.png", :type=>"image/png", :name=>"user[image]", :tempfile=>#<Tempfile:C:/Users/SOMETH~1/AppData/Local/Temp/RackMultipart20170401-8168-1k60oa7.png>, :head=>"Content-Disposition: form-data; name=\"user[image]\"; filename=\"upload_1.png\"\r\nContent-Type: image/png\r\n"}}


8 > 3, 3, 2

8/3 = 2 rows (names per column)



	quotient = 2
6/3 = 2 + 0 (2, 2, 2)
7/3 = 2 + 1 (3, 3, 1)
8/3 = 2 + 1 (3, 3, 2)

	quotient = 3
9/3 = 3 + 0 (3, 3, 3)


7%3 = 1
8%3 = 2




heroku addons:create heroku-postgresql:hobby-dev




select column_name from information_schema.columns where table_name='details'
select * from details join images on details.id = images.details_id



Image: \x6956424f5277304b47676f414141414e5355684555674141414451414141424943415941414143356d4e5a5241414141426d4a4c5230514
12f77442f41502b6776616554414141414358424957584d41414137444141414f777748486236686b414141414233524a5455554834514d664169735
6526a2b536367414141386c4a52454655614e37746d38397256466355787a3933484456746f307878304251434e5a733230465a46593048496f6c426
1756e4f6757625467507942496f63575658626a706f6e526a7065444370574470536e666951696f754e62686f6153454c6f536b4e4a616d78735a6d4
a6b306d693379376547526a44354c30334c322b5365384d3763485a4a337632383733336e6e68383354684937796371352f30586e426f45616341493
46248345132414f7341503841302b59506764744938376b39506865466e4273434a6f417a7746476743627965346a635867466541333444727745394
97335746169365473446858424e344a6c5156326754666969344a6e676b7143536455315a516371437277542f32694b556f7a6673355677514450516
6434b714342344b6c6e4547364b66614c594b682f514441712b467651366a4e4d323175434f6347782f494667334e3761326862427448334e6e6c764
c4479685370723746494f75394c68684c576d7479324861754376774b764f484275546b5076426358326b734a4d475867466e44416b3052674833414
83577617941634558774474327976746765344533675175395a77724f5659412f674971484b647369384861337252656e30486c37497a37614c75447
23941704675646d66486d323162725a694b6b326e5557674357504f38556c69315a446956517050415741446c7a2b3949373859445266584d764d666
654366331676265515a754b32584d33325a776932436e79533941324e3277455767753048506b344347676d736a54436342445163474641314365685
1794544646f6c78346653334a78536d3045426a4f59744b5765787759304a4d6b6f4a6e41674f6153674b59444135704a41726f4c504173457067486
35334707956614d4f495a6462416b626a63376d6f6354345669454b7a6e544278396441316f4256417076316a326e706f47486a6b2b625a72416b655
148695572464d6c3431654d796f67586358412b7a73554b525368554c44713935434c514d6a505457395a476541743936474d4b58674f38333670374
774344b6a4475556b4d456f2f7870665a4b74532f674b4e496a57342f55457249597065426a34436e6e716854427a37634343595a4b494b614e61694
742316e313666563975433772545430662b6e51625279722f435362364d634562457a77527247345279496f39627a7a74476e73663630647434702b4
a70674376396a6d617a646b336b376f434b5058386d4f696265682b345a42397033696c5379374b414879796154666534766b336455786753584c486
8376d59487955326272462f7664664c643661564d37394335515a7972415a65427a77475a5a3755586473374a4d704d5072435764705748533032574
c6d75432b7663312b527279473355365a4648776d4b4f6333316f6342775a6432583643785464507678344c7a6161374d4a4d4763466979594974706
d623659356a2b49754a6430773265575a4c776c75436172707a71486f6e486c6f4c6546646e745a4471335a4f6e554b61326a676f524746345276446
3513258572b335037484561374b78534679536d6947794d6c777241586c72534f5750333230734976457430594351576d76663442344c7558437a7a6
e4470733665776e546d734278704b6d32476d63394467427062446477726e504c6e664b6b784d35715a65426b3535617241344f456251326b6657326
76e5845625858496c647067565141565141565141465541465541465541425641345a726261662f322b54383947594f6b2f494b586e6741414141424
a52553545726b4a6767673d3d

Image: 
\x6956424f5277304b47676f414141414e5355684555674141414451414141424943415941414143356d4e5a5241414141426d4a4c523051412f77442f41502b6776616554414141414358424957584d41414137444141414f777748486236686b414141414233524a5455554834514d6641697356526a2b536367414141386c4a52454655614e37746d38397256466355787a3933484456746f307878304251434e5a733230465a46593048496f6c4261756e4f6757625467507942496f63575658626a706f6e526a7065444370574470536e666951696f754e62686f6153454c6f536b4e4a616d78735a6d4a6b306d693379376547526a44354c30334c322b5365384d3763485a4a337632383733336e6e68383354684937796371352f30586e426f4561634149346248345132414f7341503841302b59506764744938376b39506865466e4273434a6f417a7746476743627965346a63586746654133344472774539497335746169365473446858424e344a6c5156326754666969344a6e676b7143536455315a516371437277542f32694b556f7a66733556775144505166434b714342344b6c6e4547364b66614c594b682f514441712b467651366a4e4d323175434f6347782f494667334e3761326862427448334e6e6c764c4479685370723746494f75394c68684c576d7479324861754376774b764f484275546b5076426358326b734a4d475867466e44416b305267483341483577617941634558774474327976746765344533675175395a77724f5659412f674971484b647369384861337252656e30486c37497a37614c7544723941704675646d66486d323162725a694b6b326e5557674357504f38556c69315a446956517050415741446c7a2b3949373859445266584d764d666654366331676265515a754b32584d33325a776932436e79533941324e3277455767753048506b344347676d736a544363424451634746413143656851794544646f6c78346653334a78536d3045426a4f59744b5765787759304a4d6b6f4a6e41674f6153674b59444135704a41726f4c50417345706748635334707956614d4f495a6462416b626a63376d6f6354345669454b7a6e544278396441316f4256417076316a326e706f47486a6b2b625a72416b655148695572464d6c3431654d796f67586358412b7a73554b525368554c44713935434c514d6a505457395a476541743936474d4b58674f38333670374774344b6a4475556b4d456f2f7870665a4b74532f674b4e496a57342f55457249597065426a34436e6e716854427a37634343595a4b494b614e61694742316e313666563975433772545430662b6e51625279722f435362364d634562457a77527247345279496f39627a7a74476e73663630647434702b4a70674376396a6d617a646b336b376f434b5058386d4f696265682b345a42397033696c5379374b414879796154666534766b336455786753584c4868376d59487955326272462f7664664c643661564d37394335515a7972415a65427a77475a5a3755586473374a4d704d5072435764705748533032574c6d75432b7663312b527279473355365a4648776d4b4f6333316f6342775a6432583643785464507678344c7a6161374d4a4d4763466979594974706d623659356a2b49754a6430773265575a4c776c75436172707a71486f6e486c6f4c6546646e745a4471335a4f6e554b61326a676f5247463452764463513258572b335037484561374b78534679536d6947794d6c777241586c72534f5750333230734976457430594351576d76663442344c7558437a7a6e4470733665776e546d734278704b6d32476d63394467427062446477726e504c6e664b6b784d35715a65426b3535617241344f456251326b665732676e5845625858496c647067565141565141565141465541465541465541425641345a726261662f322b54383947594f6b2f494b586e6741414141424a52553545726b4a6767673d3d


Image: 
aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQURRQUFBQklDQVlBQUFDNW1OWlJBQUFBQm1KTFIwUUEvd0QvQVArZ3ZhZVRBQUFBQ1hCSVdYTUFBQTdEQUFBT3d3SEhiNmhrQUFBQUIzUkpUVVVINFFNZkFpc1ZSaitTY2dBQUE4bEpSRUZVYU43dG04OXJWRmNVeHo5M0hEVnRvMHh4MEJRQ05aczIwRlpGWTBISW9sQmF1bk9nV2JUZ1B5QklvY1dWWGJqcG9uUmpwZURDcFdEcFNuZmlRaW91TmJob2FTRUxvU2tOSmFteHNabUprMG1pM3k3ZUdSakQ1TDAzTDIrU2U4TTdjSFpKM3YyODczM25uaDgzVGhJN3ljcTUvMFhuQm9FYWNBSTRiSDRRMkFPc0FQOEEwK1lQZ2R0STg3azlQaGVGbkJzQ0pvQXp3RkdnQ2J5ZTRqY1hnRmVBMzREcndFOUlzNXRhaTZUc0RoWEJONEpsUVYyZ1RmaWk0Sm5na3FDU2RVMVpRY3FDcndULzJpS1VvemZzNVZ3UURQUWZDS3FDQjRLbG5FRzZLZmFMWUtoL1FEQXErRnZRNmpOTTIxdUNPY0d4L0lGZzNON2EyaGJCdEgzTm5sdkxEeWhTcHI3RklPdTlMaGhMV210eTJIYXVDdndLdk9IQnVUa1B2QmNYMmtzSk1HWGdGbkRBazBSZ0gzQUg1d2F5QWNFWHdEdDJ5dnRnZTRFM2dRdTlad3JPVllBL2dJcUhLZHNpOEhhM3JSZW4wSGw3SXo3YUx1RHI5QXBGdWRtZkhtMjFiclppS2syblVXZ0NXUE84VWxpMVpEaVZRcFBBV0FEbHorOUk3OFlEUmZYTXZNZmZUNmMxZ2JlUVp1SzJYTTMyWndpMkNueVM5QTJOMndFV2d1MEhQazRDR2dtc2pUQ2NCRFFjR0ZBMUNlaFF5RURkb2x4NGZTM0p4U20wRUJqT1l0S1dleHdZMEpNa29KbkFnT2FTZ0tZREE1cEpBcm9MUEFzRXBnSGNTNHB5VmFNT0laZGJBa2JqYzdtb2NUNFZpRUt6blRCeDlkQTFvQlZBcHYxajJucG9HSGprK2JackFrZVFIaVVyRk1sNDFlTXlvZ1hjWEErenNVS1JTaFVMRHE5NUNMUU1qUFRXOVpHZUF0OTZHTUtYZ084MzZwN0d0NEtqRHVVa01Fby94cGZaS3RTL2dLTklqVzQvVUVySVlwZUJqNENubnFoVEJ6N2NDQ1laS0lLYU5haUdCMW4xNmZWOXVDN3JUVDBmK25RYlJ5ci9DU2I2TWNFYkV6d1JyRzRSeUlvOWJ6enRHbnNmNjBkdDRwK0pwZ0N2OWptYXpkazNrN29DS1BYOG1PaWJlaCs0WkI5cDNpbFN5N0tBSHl5YVRmZTR2azNkVXhnU1hMSGg3bVlIeVUyYnJGL3ZkZkxkNmFWTTc5QzVRWnlyQVplQnp3R1paN1VYZHM3Sk1wTVByQ1dkcFdIUzAyV0xtdUMrdmMxK1JyeUczVTZaRkh3bUtPYzMxb2NCd1pkMlg2Q3hUZFB2eDRMemFhN01KTUdjRml5WUl0cG1iNlk1aitJdUpkMHcyZVdaTHdsdUNhcnB6cUhvbkhsb0xlRmRudFpEcTNaT25VS2EyamdvUkdGNFJ2RGNRMlhXKzNQN0hFYTdLeFNGeVNtaUd5TWx3ckFYbHJTT1dQMzIwc0l2RXQwWUNRV212ZjRCNEx1WEN6em5EcHM2ZXduVG1zQnhwS20yR21jOURnQnBiRGR3cm5QTG5mS2t4TTVxWmVCazU1YXJBNE9FYlEya2ZXMmduWEViWFhJbGRwZ1ZRQVZRQVZRQUZVQUZVQUZVQUJWQTRacmJhZi8yK1Q4OUdZT2svSUtYbmdBQUFBQkpSVTVFcmtKZ2dnPT0=


At this point, I'm going back to prototyping for image handling.  



    conn.prepare('q_statement',
                 "update details, numbers, quotes
                  set age = $2, num_1 = $3, quote = $4
                  from numbers
                  join quotes on details.id = quotes.details_id
                  where name = $1
                  and details.id = numbers.details_id")


    # prepare SQL statement to update age for specified id
    conn.prepare('q_statement',
                 "update numbers
                  set age = $2, num_1 = $3, quote = $4
                  from details
                  join quotes on details.id = quotes.details_id
                  where name = $1
                  and details.id = numbers.details_id")


    # prepare SQL statement to update age for specified id
    conn.prepare('q_statement',
                 "with t as (
                    select d.id as id, d.name as name, d.age as age, n.num_1 as num_1, q.quote as quote
                    from details d
                    join numbers n on d.id = n.details_id
                    join quotes q on d.id = q.details_id
                  )
                  update details
                  set t.age = $2, t.num_1 = $3, t.quote = $4
                  from t
                  where t.name = $1
                  and details.id = t.id
                 ")



column_name, column_value

take in hash
{"name" => "Jim", "age" => 74, "num_1" => 100, "quote" => "Set your goals high, and don't stop till you get there."}



        conn.prepare('q_statement',
                     "update $2
                      set $3 = $4
                      where id = $1")

        # execute prepared SQL statement
        rs = conn.exec_prepared('q_statement', [id, table, column, value])

_________________________

        if value.class == String
          query = "update " + table + " set " + column + " = " + "\"" + value + "\"" + " where id = " + id
        else
          query = "update " + table + " set " + column + " = " + value + " where id = " + id
        end

        # prepare SQL statement to update column for specified id
        conn.prepare('q_statement', query)




# Method to return array of sorted/transposed names from db for populating /list_users table
def get_names()
  begin
    names = []
    conn = open_db()
    conn.prepare('q_statement',
                 "select name from details order by name")
    query = conn.exec_prepared('q_statement')
    conn.exec("deallocate q_statement")
    query.each { |pair| names.push(pair["name"]) }
    names
    sorted = names.count > 3 ? rotate_names(names) : names  # rerrange names if more than 3 names
  rescue PG::Error => e
    puts 'Exception occurred'
    puts e.message
  ensure
    conn.close if conn
  end
end


AWS database password:

DB instance identifier (db name):  prototype
Master username:  test
Password:  pr0t0type


prototype.c1twkq01oyfi.us-west-2.rds.amazonaws.com


ENV['dbuser']='test'  # user
ENV['dbpassword']='pr0t0type'  # password
ENV['domain']='http://localhost:9292/prototype'
ENV['dbname']='prototype'
ENV['host']='prototype.c1twkq01oyfi.us-west-2.rds.amazonaws.com'  # AWS link
ENV['port']='5432'  # AWS port, always 5432


dbbeaver - PostgreSQL query browser

if no query window - close & reopen pgAdmin 4




